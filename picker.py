import PySimpleGUI as sg

#Подборщик частотного преобразователя ОВЕН по шильдику двигателя и применению


#print=sg.Print

#--------------------------------------------------------------ЗАДАЁМ ЛИСТЫ, СЛОВАРИ И КОРТЕЖИ(НЕИЗМЕННЫЙ МАССИВ)-----------------------------------------------------------------------------------------

Otrasli = ['HVAC', 'Металлообработка/горное дело', 'Пищевая промышленность',
 'ЦБК', 'Нефтехимия', 'Деревообработка']

ALL_IP = ['20','54']


ALL_PRIVODA = ['Центробежный насос', 'Миксеры, мешалки','Винтовой компрессор (ненагруженный)','Винтовой компрессор (нагруженный)','Поршневой компрессор (ненагруженный)', 'Поршневой компрессор (нагруженный, 2 поршня)', 
			   'Поршневой компрессор (нагруженный, 4 поршня)','Поршневой компрессор (нагруженный, 6 поршней)','Конвейер', 'Вентилятор', 'Поршневой насос', 'Погружной насос',
              
              'Конвейер питателя', 'Пылесборник','Шлифовальное оборудование','Молотковая дробилка','Щековая дробилка','Конусная дробилка','Валковая дробилка','Рольганг','Шаровая, стержневая мельница',
              'Машина протяжки проволоки','Ленточный конвейер','Скребковый Конвейер',

              'Центрефуга','Осушитель','Мельница','Пальтайзер','Сепаратор','Станок для резки','Установка мойки бутылок',

              'Шнек-разрыватель','Измельчитель',

              'Экструдер','Шнек',

              'Ленточная пила','Стружковый станок','Круговая пила','Корообдирный станок','Кромкострогальный станок','Рубанок','Ленточно-шлифовальный станок']

EQ_otrasli = { 'Центробежный насос':1, 'Миксеры, мешалки':1, 'Винтовой компрессор (ненагруженный)':1, 'Винтовой компрессор (нагруженный)':1,'Поршневой компрессор (ненагруженный)':1,
			   'Поршневой компрессор (нагруженный, 2 поршня)':1, 'Поршневой компрессор (нагруженный, 4 поршня)':1,'Поршневой компрессор (нагруженный, 6 поршней)':1, 'Конвейер':1, 'Вентилятор':1,
			   'Поршневой насос':1,'Погружной насос':1,

               'Конвейер питателя':2, 'Пылесборник':2,'Шлифовальное оборудование':2,'Молотковая дробилка':2,'Щековая дробилка':2,'Конусная дробилка':2,'Валковая дробилка':2,'Рольганг':2,
               'Шаровая, стержневая мельница':2,'Машина протяжки проволоки':2,'Ленточный конвейер':2,'Скребковый Конвейер':2,

               'Центрефуга':3,'Осушитель':3,'Мельница':3,'Пальтайзер':3,'Сепаратор':3,'Станок для резки':3,'Установка мойки бутылок':3,

               'Шнек-разрыватель':4,'Измельчитель':4,

               'Экструдер':5,'Шнек':5,

               'Ленточная пила':6,'Стружковый станок':6,'Круговая пила':6,'Корообдирный станок':6,'Кромкострогальный станок':6,'Рубанок':6,'Ленточно-шлифовальный станок':6} 

EQ_PRIVODA = {'Миксеры, мешалки':2, 'Центробежный насос':1.1, 'Винтовой компрессор (ненагруженный)':1, 'Винтовой компрессор (нагруженный)':1.6,'Поршневой компрессор (ненагруженный)':1,
			  'Поршневой компрессор (нагруженный, 2 поршня)':2, 'Поршневой компрессор (нагруженный, 4 поршня)':1.6,'Поршневой компрессор (нагруженный, 6 поршней)':1.5, 'Конвейер':1.6, 'Вентилятор':1.1,
			  'Поршневой насос':2,'Погружной насос':1.6,

              'Конвейер питателя':2, 'Пылесборник':1.1,'Шлифовальное оборудование':1.5,'Молотковая дробилка':2,'Щековая дробилка':2.5,'Конусная дробилка':2,'Валковая дробилка':2,'Рольганг':1.8,
              'Шаровая, стержневая мельница':1.6,'Машина протяжки проволоки':2.8,'Ленточный конвейер':1.6,'Скребковый Конвейер':1.6,

              'Центрефуга':1.6,'Осушитель':1.8,'Мельница':1.8,'Пальтайзер':1.8,'Сепаратор':1.8,'Станок для резки':1.2,'Установка мойки бутылок':1.2,

              'Шнек-разрыватель':1.8,'Измельчитель':1.8,

              'Экструдер':2,'Шнек':1.6,

              'Ленточная пила':1.8,'Стружковый станок':1.8,'Круговая пила':1.2,'Корообдирный станок':1.2,'Кромкострогальный станок':1.2,'Рубанок':1.2,'Ленточно-шлифовальный станок':1.6} 

PCHV1_2 = {0:'ПЧВ101-К18-А',
           1:'ПЧВ101-К37-А',
           2:'ПЧВ101-К75-А',
           3:'ПЧВ102-1К5-А',
           4:'ПЧВ103-2К2-А',
           5:'ПЧВ101-К37-В',
           6:'ПЧВ101-К75-В',
           7:'ПЧВ102-1К5-В',
           8:'ПЧВ102-2К2-В',
           9:'ПЧВ103-3К0-В',
           10:'ПЧВ103-4К0-В',
           11:'ПЧВ203-5К5-В',
           12:'ПЧВ203-7К5-В',
           13:'ПЧВ204-11К-В',
           14:'ПЧВ204-15К-В',
           15:'ПЧВ205-18К-В',
           16:'ПЧВ205-22К-В'}

# 0 - напряжение, 1 - степень IP, 2 - ток

Owen_PCHV_1 = [ [220, 20, 1.2] , [220, 20, 2.2] , [220, 20, 4.2] , [220, 20, 6.7] ,[220, 54, 9.5] ,[380, 54, 1.1] ,[380, 54, 2.1] ,[380, 54, 3.6] ,[380, 54, 5.2] ,[380, 54, 7.1] ,
 [380, 54, 8.9] , [380, 20, 11.9] , [380, 20, 15.3], [380, 54, 22.9] ,[380, 54, 30.7] ,[380, 54, 36.7] ,[380, 54, 42.5] ]

PCHV_3 = {0:'ПЧВ3-К37-В',
		  1:'ПЧВ3-К75-В',
		  2:'ПЧВ3-1К5-В',
		  3:'ПЧВ3-2К2-В',
		  4:'ПЧВ3-3К0-В',
		  5:'ПЧВ3-4К0-В',
		  6:'ПЧВ3-5К5-В',
		  7:'ПЧВ3-7К5-В',
		  8:'ПЧВ3-11К-В',
		  9:'ПЧВ3-15К-В',
		  10:'ПЧВ3-18К-В',
		  11:'ПЧВ3-22К-В',
		  12:'ПЧВ3-30К-В',
		  13:'ПЧВ3-37К-В',
		  14:'ПЧВ3-45К-В',
		  15:'ПЧВ3-55К-В',
		  16:'ПЧВ3-75К-В',
		  17:'ПЧВ3-90К-В'}


Owen_PCHV_3 = [ [380, 20, 1.2] , [380, 20, 2.2] , [380, 20, 3.7] , [380, 20, 5.3] , [380, 20, 7] ,[380, 20, 9.1] ,[380, 20, 12] ,[380, 20, 15.5] ,[380, 20, 23] ,[380, 20, 31] ,
 [380, 20, 37] , [380, 20, 42.5] , [380, 20, 61], [380, 20, 73] ,[380, 20, 90] ,[380, 20, 106] ,[380, 20, 147] ,[380, 20, 177] ]

PCHV_3_54 = {0:'ПЧВ3-К37-В-54',
			 1:'ПЧВ3-К75-В-54',
			 2:'ПЧВ3-1К5-В-54',
		     3:'ПЧВ3-2К2-В-54',
	     	 4:'ПЧВ3-3К0-В-54',
			 5:'ПЧВ3-4К0-В-54',
			 6:'ПЧВ3-5К5-В-54',
			 7:'ПЧВ3-7К5-В-54',
		  	 8:'ПЧВ3-11К-В-54',
		 	 9:'ПЧВ3-15К-В-54',
		 	 10:'ПЧВ3-18К-В-54',
		 	 11:'ПЧВ3-22К-В-54',
			 12:'ПЧВ3-30К-В-54',
			 13:'ПЧВ3-37К-В-54',
			 14:'ПЧВ3-45К-В-54',
			 15:'ПЧВ3-55К-В-54',
			 16:'ПЧВ3-75К-В-54',
			 17:'ПЧВ3-90К-В-54'}

Owen_PCHV_3_54 = [ [380, 54, 1.2] , [380, 54, 2.2] , [380, 54, 3.7] , [380, 54, 5.3] , [380, 54, 7] ,[380, 54, 9.1] ,[380, 54, 12] ,[380, 54, 15.5] ,[380, 54, 23] ,[380, 54, 31] ,
 [380, 54, 37] , [380, 54, 42.5] , [380, 54, 61], [380, 54, 73] ,[380, 54, 90] ,[380, 54, 106] ,[380, 54, 147] ,[380, 54, 177] ]
 #---------------------------------------------------------------ОПРЕДЕЛЯЕМ МЕТОДЫ--------------------------------------------------------------------------------------------------------------------


def select_prim (Otrasli,ALL_prim):
	k = len(ALL_prim)
	sel_preminenie = []
	if Otrasli == 'HVAC':
		for i in range (0, k):
			if EQ_otrasli.get(ALL_prim[i]) == 1:
				sel_preminenie.append(ALL_prim[i])
		return sel_preminenie
	if Otrasli == 'Металлообработка/горное дело':
		for i in range (0, k):
			if EQ_otrasli.get(ALL_prim[i]) == 2:
				sel_preminenie.append(ALL_prim[i])
		return sel_preminenie
	if Otrasli == 'Пищевая промышленность':
		for i in range (0, k):
			if EQ_otrasli.get(ALL_prim[i]) == 3:
				sel_preminenie.append(ALL_prim[i])
		return sel_preminenie
	if Otrasli == 'ЦБК':
		for i in range (0, k):
			if EQ_otrasli.get(ALL_prim[i]) == 4:
				sel_preminenie.append(ALL_prim[i])
		return sel_preminenie
	if Otrasli == 'Нефтехимия':
		for i in range (0, k):
			if EQ_otrasli.get(ALL_prim[i]) == 5:
				sel_preminenie.append(ALL_prim[i])
		return sel_preminenie
	if Otrasli == 'Деревообработка':
		for i in range (0, k):
			if EQ_otrasli.get(ALL_prim[i]) == 6:
				sel_preminenie.append(ALL_prim[i])
		return sel_preminenie

def create_window(sel_preminenie):

	layout = [ [sg.Text('Введите данные с шильдика двигателя', size =(35, 1))],
	           [sg.Text('Введите напряжение питания:',size =(24, 1)), sg.Input(key = 'voltage',size =(45, 1))],
	           [sg.Text('Введите ток двигателя:',size =(24, 1)), sg.Input(key = 'tok',size =(45, 1))],
	           [sg.Text('Выберите требуемый IP',size =(24, 1)), sg.Combo(values=ALL_IP, default_value=sel_IP,key = '-SEL_IP-', enable_events = True,size =(45, 1))],
	           [sg.Text ('Выберите область применения:',size =(24, 1)), sg.Combo (values=Otrasli, default_value=sel_otrasl,key = '-SEL_PRIM-', enable_events = True,size =(45, 1)), sg.Button ('Подтвердить')],
	           [sg.Text ('Выберите ваше применение:',size =(24, 1)), sg.Listbox(values=ALL_PRIVODA,size =(45, 12), key = '-LIST-', enable_events = True) ],
	           [sg.Text('Ваш вариант:',size =(24, 1)), sg.Text('Ваш выбор: \nТок двигателя:  \nТок преобразователя: ',key = 'Otvet',size =(45, 3)) ],
	           [sg.Button('Рассчитать'), sg.Button('Cancel')] ]
	window = sg.Window('Подборщик ПЧВ', layout, finalize=True)
	new_prem = select_prim (sel_otrasl,ALL_PRIVODA)
	window['-LIST-'].update(new_prem)
	window['-LIST-'].set_value([sel_preminenie])
	return window


def vibor_pch (volt, tok, primenenie, ip):

	Motor_1 = ['','','','']
	Motor_1 [0] = ip
	Motor_1 [1] = volt
	Motor_1 [2] = tok
	Motor_1 [3] = primenenie

	print (Motor_1)

	# 0 - напряжение питания двигателя, 1 - ток двигателя, 2 - коээфициент по применению

	i = 0 # номер проверяемого частотника

	j = 0 # номер проверяемого параметра

	k = 0 # 1-ПЧВ1 , 3 - ПЧВ3

	Check = False

	Koef_prim = 1

	tok_mot = 0

	a = '0'

	while True:

		while (Check!=True):
			if float(Motor_1[j]) == 54:
				k = 4
				j +=1
				if float(Motor_1[j]) <= float (Owen_PCHV_3_54[i][0]):
					j +=1
				else:
					i +=1
					j = 0
				if j == 2:
					tok_mot = float(Motor_1[2]) * float(primenenie)
					if tok_mot <= Owen_PCHV_3_54[i][2]:
						j = 0
						Check = True
						a = str ("Ваш выбор: " + PCHV_3_54.get(i) + "\nТок двигателя: " + str(tok_mot) + "\nТок преобразователя: " + str(Owen_PCHV_3_54 [i][2]))
					else:
						i +=1
						j = 0
			if float(Motor_1[j]) == 20:
				if Motor_1[3] > 1.1:
					k = 1
					j +=1
					if float(Motor_1[j]) <= float (Owen_PCHV_1[i][0]):
						j +=1
					else:
						i +=1
						j = 0
					if j == 2:
						tok_mot = float(Motor_1[2]) * float(primenenie)
						if tok_mot <= Owen_PCHV_1[i][2]:
							j = 0
							Check = True
							a = str ("Ваш выбор: " + PCHV1_2.get(i) + "\nТок двигателя: " + str(tok_mot) + "\nТок преобразователя: " + str(Owen_PCHV_1 [i][2]))
						else:
							i +=1
							j = 0
				else:
					k = 3
					j +=1
					if float(Motor_1[j]) <= float (Owen_PCHV_3[i][0]):
						j +=1
					else:
						i +=1
						j = 0
					if j == 2:
						tok_mot = float(Motor_1[2]) * float(primenenie)
						if tok_mot <= Owen_PCHV_3[i][2]:
							j = 0
							Check = True
							a = str ("Ваш выбор: " + PCHV_3.get(i) + "\nТок двигателя: " + str(tok_mot) + "\nТок преобразователя: " + str(Owen_PCHV_3 [i][2]))
						else:
							i +=1
							j = 0
		return a
		break

def Check_error (check_volt, check_tok, check_prem, check_ip):
	error = 0
	Check_tok_mot = 0
	Check_tok_PCHV = 0
	if not check_volt:
		error = 10
	elif not check_tok:
		error = 11
	elif not check_prem:
		error = 12
	elif not check_ip:
		error = 13
	else:
		if float(check_volt) == 0:
			error = 1
		if float(check_volt) > 380:
			error = 2
		if float(check_tok) == 0:
			error = 3
		if float(check_ip) == 0:
			error = 4
		if float(check_prem) == 0:
			error = 5
	if check_tok != '':
		Check_tok_mot = float(check_tok) * float(check_prem)
		if float(check_ip) == 54:
			if Check_tok_mot > 177:
				error = 20
				Check_tok_PCHV = 177
		if float (check_ip) == 20:
			if check_prem >1.1:
				if Check_tok_mot > 42.5:
					error = 21
					Check_tok_PCHV = 42.5
			elif check_prem <= 1.1:
				if Check_tok_mot > 177:
					Check_tok_PCHV = 177
					error = 22

	return error,Check_tok_PCHV, Check_tok_mot


#----------------------------------------------------------------------ОСНОВНАЯ ЧАСТЬ КОДА-----------------------------------------------------------------------------------------------------------


sel_otrasl = 'HVAC'
sel_prem = 'Центробежный насос'
sel_IP = '20'
sel_otvet = 'Вбейте данные'

sg.theme('DarkBrown')

window = create_window(sel_prem)
 


while True:
    event, values = window.read()
    print (event, values)

    if event == sg.WIN_CLOSED or event == 'Cancel':
	        break

    elif event == 'Рассчитать':
    	new_volt = window['voltage'].get()
    	new_tok = window['tok'].get()
    	now_prem = window['-LIST-'].get()
    	now_prem = now_prem[0]
    	new_prem =  EQ_PRIVODA.get (now_prem)
    	new_ip = window['-SEL_IP-'].get()
    	err = Check_error(new_volt, new_tok, new_prem, new_ip)
    	if err[0] == 0:
    		b = vibor_pch (new_volt, new_tok, new_prem, new_ip)
    		window['Otvet'].update(b)
    	elif err[0] < 20:
    		sg.Print('Ошибка! Код ошибки: '+str(err[0])+'\n\n'+'-'*80+'\n\n Номера кодов ошибки:\n 1 - Вы ввели нулевое напряжение\n 2 - Слишком большое напряжение\n 3 - Вы ввели 0-ой ток \n 4 - Вы ввели неверное IP'
    			+ '\n 5 - Вы вбили нулевое применение\n 10 - Пустое напряжение\n 11 - Пустой ток\n 12 - Нет применения\n 13 - Нет IP\n 20,21,22 - Слишком большой ток! Обратитесь в тех. поддержку ')
    	elif err[0] > 20:
    		sg.Print('Ошибка! Код ошибки: '+str(err[0])+'\n\nТок двигателя: '+str(err[2])+'\nТок частотного преобразователя: '+str(err[1])+'\n'+'-'*80+'\n Номера кодов ошибки:\n 1 - Вы ввели нулевое напряжение\n 2 - Слишком большое напряжение\n 3 - Вы ввели 0-ой ток'+
    			' \n 4 - Вы ввели неверное IP\n 5 - Вы вбили нулевое применение\n 10 - Пустое напряжение\n 11 - Пустой ток\n 12 - Нет применения\n 13 - Нет IP\n 20,21,22 - Слишком большой ток! Обратитесь в тех. поддержку ')
    

    elif event == ('Подтвердить'):
        new_prem = (window['-SEL_PRIM-'].get ())
        sel_prem = select_prim(new_prem, ALL_PRIVODA)
        window['-LIST-'].update(sel_prem)
        

event, values = window.read()	
window.close()